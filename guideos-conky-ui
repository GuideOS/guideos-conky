#!/usr/bin/env python3
import gi
import subprocess
import os

gi.require_version('Gtk', '3.0')
from gi.repository import Gtk

CONKY_SCRIPT = '/usr/lib/guideos-conky/conky-start.sh'

class ConkyWindow(Gtk.Window):
    AUTOSTART_DIR = os.path.expanduser("~/.config/autostart")
    AUTOSTART_FILE = os.path.join(AUTOSTART_DIR, "conky.desktop")

    def __init__(self):
        Gtk.Window.__init__(self, title="Conky Steuerung")
        self.set_border_width(20)
        self.set_default_size(350, 120)

        box = Gtk.Box(spacing=10)
        box.set_homogeneous(True)
        self.add(box)

        self.btn_on = Gtk.Button(label="Conky an")
        self.btn_on.connect("clicked", self.on_conky_on)
        box.pack_start(self.btn_on, True, True, 0)

        self.btn_off = Gtk.Button(label="Conky aus")
        self.btn_off.connect("clicked", self.on_conky_off)
        box.pack_start(self.btn_off, True, True, 0)

    # Keine zus√§tzlichen Autostart-Buttons

    def on_conky_on(self, widget):
        subprocess.Popen([CONKY_SCRIPT])
        # Autostart-Eintrag erstellen
        if not os.path.exists(self.AUTOSTART_DIR):
            os.makedirs(self.AUTOSTART_DIR)
        desktop_entry = f"""[Desktop Entry]\nType=Application\nExec={CONKY_SCRIPT}\nHidden=false\nNoDisplay=false\nX-GNOME-Autostart-enabled=true\nName=Conky\nComment=Startet Conky beim Login\n"""
        with open(self.AUTOSTART_FILE, "w") as f:
            f.write(desktop_entry)

    def on_conky_off(self, widget):
        subprocess.Popen(["pkill", "conky"])
        # Autostart-Eintrag entfernen
        if os.path.exists(self.AUTOSTART_FILE):
            os.remove(self.AUTOSTART_FILE)

    # ...existing code...

win = ConkyWindow()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
